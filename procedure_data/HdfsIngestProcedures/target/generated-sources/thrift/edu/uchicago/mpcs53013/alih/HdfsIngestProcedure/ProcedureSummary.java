/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.uchicago.mpcs53013.alih.HdfsIngestProcedure;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-05")
public class ProcedureSummary implements org.apache.thrift.TBase<ProcedureSummary, ProcedureSummary._Fields>, java.io.Serializable, Cloneable, Comparable<ProcedureSummary> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProcedureSummary");

  private static final org.apache.thrift.protocol.TField DRG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("drgCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DRG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("drgName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROVIDER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("providerName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ZIP_FIELD_DESC = new org.apache.thrift.protocol.TField("zip", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField AVG_COVERED_CHARGES_FIELD_DESC = new org.apache.thrift.protocol.TField("avgCoveredCharges", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField AVG_TOTAL_PAYMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("avgTotalPayments", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField AVG_MEDICARE_PAYMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("avgMedicarePayments", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField NUM_DISCHARGES_FIELD_DESC = new org.apache.thrift.protocol.TField("numDischarges", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProcedureSummaryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProcedureSummaryTupleSchemeFactory());
  }

  public String drgCode; // required
  public String drgName; // required
  public String providerName; // required
  public String zip; // required
  public String state; // required
  public double avgCoveredCharges; // required
  public double avgTotalPayments; // required
  public double avgMedicarePayments; // required
  public int numDischarges; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DRG_CODE((short)1, "drgCode"),
    DRG_NAME((short)2, "drgName"),
    PROVIDER_NAME((short)3, "providerName"),
    ZIP((short)4, "zip"),
    STATE((short)5, "state"),
    AVG_COVERED_CHARGES((short)6, "avgCoveredCharges"),
    AVG_TOTAL_PAYMENTS((short)7, "avgTotalPayments"),
    AVG_MEDICARE_PAYMENTS((short)8, "avgMedicarePayments"),
    NUM_DISCHARGES((short)9, "numDischarges");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DRG_CODE
          return DRG_CODE;
        case 2: // DRG_NAME
          return DRG_NAME;
        case 3: // PROVIDER_NAME
          return PROVIDER_NAME;
        case 4: // ZIP
          return ZIP;
        case 5: // STATE
          return STATE;
        case 6: // AVG_COVERED_CHARGES
          return AVG_COVERED_CHARGES;
        case 7: // AVG_TOTAL_PAYMENTS
          return AVG_TOTAL_PAYMENTS;
        case 8: // AVG_MEDICARE_PAYMENTS
          return AVG_MEDICARE_PAYMENTS;
        case 9: // NUM_DISCHARGES
          return NUM_DISCHARGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AVGCOVEREDCHARGES_ISSET_ID = 0;
  private static final int __AVGTOTALPAYMENTS_ISSET_ID = 1;
  private static final int __AVGMEDICAREPAYMENTS_ISSET_ID = 2;
  private static final int __NUMDISCHARGES_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DRG_CODE, new org.apache.thrift.meta_data.FieldMetaData("drgCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DRG_NAME, new org.apache.thrift.meta_data.FieldMetaData("drgName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROVIDER_NAME, new org.apache.thrift.meta_data.FieldMetaData("providerName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ZIP, new org.apache.thrift.meta_data.FieldMetaData("zip", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVG_COVERED_CHARGES, new org.apache.thrift.meta_data.FieldMetaData("avgCoveredCharges", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AVG_TOTAL_PAYMENTS, new org.apache.thrift.meta_data.FieldMetaData("avgTotalPayments", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AVG_MEDICARE_PAYMENTS, new org.apache.thrift.meta_data.FieldMetaData("avgMedicarePayments", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NUM_DISCHARGES, new org.apache.thrift.meta_data.FieldMetaData("numDischarges", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProcedureSummary.class, metaDataMap);
  }

  public ProcedureSummary() {
  }

  public ProcedureSummary(
    String drgCode,
    String drgName,
    String providerName,
    String zip,
    String state,
    double avgCoveredCharges,
    double avgTotalPayments,
    double avgMedicarePayments,
    int numDischarges)
  {
    this();
    this.drgCode = drgCode;
    this.drgName = drgName;
    this.providerName = providerName;
    this.zip = zip;
    this.state = state;
    this.avgCoveredCharges = avgCoveredCharges;
    setAvgCoveredChargesIsSet(true);
    this.avgTotalPayments = avgTotalPayments;
    setAvgTotalPaymentsIsSet(true);
    this.avgMedicarePayments = avgMedicarePayments;
    setAvgMedicarePaymentsIsSet(true);
    this.numDischarges = numDischarges;
    setNumDischargesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProcedureSummary(ProcedureSummary other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDrgCode()) {
      this.drgCode = other.drgCode;
    }
    if (other.isSetDrgName()) {
      this.drgName = other.drgName;
    }
    if (other.isSetProviderName()) {
      this.providerName = other.providerName;
    }
    if (other.isSetZip()) {
      this.zip = other.zip;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    this.avgCoveredCharges = other.avgCoveredCharges;
    this.avgTotalPayments = other.avgTotalPayments;
    this.avgMedicarePayments = other.avgMedicarePayments;
    this.numDischarges = other.numDischarges;
  }

  public ProcedureSummary deepCopy() {
    return new ProcedureSummary(this);
  }

  @Override
  public void clear() {
    this.drgCode = null;
    this.drgName = null;
    this.providerName = null;
    this.zip = null;
    this.state = null;
    setAvgCoveredChargesIsSet(false);
    this.avgCoveredCharges = 0.0;
    setAvgTotalPaymentsIsSet(false);
    this.avgTotalPayments = 0.0;
    setAvgMedicarePaymentsIsSet(false);
    this.avgMedicarePayments = 0.0;
    setNumDischargesIsSet(false);
    this.numDischarges = 0;
  }

  public String getDrgCode() {
    return this.drgCode;
  }

  public ProcedureSummary setDrgCode(String drgCode) {
    this.drgCode = drgCode;
    return this;
  }

  public void unsetDrgCode() {
    this.drgCode = null;
  }

  /** Returns true if field drgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetDrgCode() {
    return this.drgCode != null;
  }

  public void setDrgCodeIsSet(boolean value) {
    if (!value) {
      this.drgCode = null;
    }
  }

  public String getDrgName() {
    return this.drgName;
  }

  public ProcedureSummary setDrgName(String drgName) {
    this.drgName = drgName;
    return this;
  }

  public void unsetDrgName() {
    this.drgName = null;
  }

  /** Returns true if field drgName is set (has been assigned a value) and false otherwise */
  public boolean isSetDrgName() {
    return this.drgName != null;
  }

  public void setDrgNameIsSet(boolean value) {
    if (!value) {
      this.drgName = null;
    }
  }

  public String getProviderName() {
    return this.providerName;
  }

  public ProcedureSummary setProviderName(String providerName) {
    this.providerName = providerName;
    return this;
  }

  public void unsetProviderName() {
    this.providerName = null;
  }

  /** Returns true if field providerName is set (has been assigned a value) and false otherwise */
  public boolean isSetProviderName() {
    return this.providerName != null;
  }

  public void setProviderNameIsSet(boolean value) {
    if (!value) {
      this.providerName = null;
    }
  }

  public String getZip() {
    return this.zip;
  }

  public ProcedureSummary setZip(String zip) {
    this.zip = zip;
    return this;
  }

  public void unsetZip() {
    this.zip = null;
  }

  /** Returns true if field zip is set (has been assigned a value) and false otherwise */
  public boolean isSetZip() {
    return this.zip != null;
  }

  public void setZipIsSet(boolean value) {
    if (!value) {
      this.zip = null;
    }
  }

  public String getState() {
    return this.state;
  }

  public ProcedureSummary setState(String state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public double getAvgCoveredCharges() {
    return this.avgCoveredCharges;
  }

  public ProcedureSummary setAvgCoveredCharges(double avgCoveredCharges) {
    this.avgCoveredCharges = avgCoveredCharges;
    setAvgCoveredChargesIsSet(true);
    return this;
  }

  public void unsetAvgCoveredCharges() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVGCOVEREDCHARGES_ISSET_ID);
  }

  /** Returns true if field avgCoveredCharges is set (has been assigned a value) and false otherwise */
  public boolean isSetAvgCoveredCharges() {
    return EncodingUtils.testBit(__isset_bitfield, __AVGCOVEREDCHARGES_ISSET_ID);
  }

  public void setAvgCoveredChargesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVGCOVEREDCHARGES_ISSET_ID, value);
  }

  public double getAvgTotalPayments() {
    return this.avgTotalPayments;
  }

  public ProcedureSummary setAvgTotalPayments(double avgTotalPayments) {
    this.avgTotalPayments = avgTotalPayments;
    setAvgTotalPaymentsIsSet(true);
    return this;
  }

  public void unsetAvgTotalPayments() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVGTOTALPAYMENTS_ISSET_ID);
  }

  /** Returns true if field avgTotalPayments is set (has been assigned a value) and false otherwise */
  public boolean isSetAvgTotalPayments() {
    return EncodingUtils.testBit(__isset_bitfield, __AVGTOTALPAYMENTS_ISSET_ID);
  }

  public void setAvgTotalPaymentsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVGTOTALPAYMENTS_ISSET_ID, value);
  }

  public double getAvgMedicarePayments() {
    return this.avgMedicarePayments;
  }

  public ProcedureSummary setAvgMedicarePayments(double avgMedicarePayments) {
    this.avgMedicarePayments = avgMedicarePayments;
    setAvgMedicarePaymentsIsSet(true);
    return this;
  }

  public void unsetAvgMedicarePayments() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVGMEDICAREPAYMENTS_ISSET_ID);
  }

  /** Returns true if field avgMedicarePayments is set (has been assigned a value) and false otherwise */
  public boolean isSetAvgMedicarePayments() {
    return EncodingUtils.testBit(__isset_bitfield, __AVGMEDICAREPAYMENTS_ISSET_ID);
  }

  public void setAvgMedicarePaymentsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVGMEDICAREPAYMENTS_ISSET_ID, value);
  }

  public int getNumDischarges() {
    return this.numDischarges;
  }

  public ProcedureSummary setNumDischarges(int numDischarges) {
    this.numDischarges = numDischarges;
    setNumDischargesIsSet(true);
    return this;
  }

  public void unsetNumDischarges() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMDISCHARGES_ISSET_ID);
  }

  /** Returns true if field numDischarges is set (has been assigned a value) and false otherwise */
  public boolean isSetNumDischarges() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMDISCHARGES_ISSET_ID);
  }

  public void setNumDischargesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMDISCHARGES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DRG_CODE:
      if (value == null) {
        unsetDrgCode();
      } else {
        setDrgCode((String)value);
      }
      break;

    case DRG_NAME:
      if (value == null) {
        unsetDrgName();
      } else {
        setDrgName((String)value);
      }
      break;

    case PROVIDER_NAME:
      if (value == null) {
        unsetProviderName();
      } else {
        setProviderName((String)value);
      }
      break;

    case ZIP:
      if (value == null) {
        unsetZip();
      } else {
        setZip((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((String)value);
      }
      break;

    case AVG_COVERED_CHARGES:
      if (value == null) {
        unsetAvgCoveredCharges();
      } else {
        setAvgCoveredCharges((Double)value);
      }
      break;

    case AVG_TOTAL_PAYMENTS:
      if (value == null) {
        unsetAvgTotalPayments();
      } else {
        setAvgTotalPayments((Double)value);
      }
      break;

    case AVG_MEDICARE_PAYMENTS:
      if (value == null) {
        unsetAvgMedicarePayments();
      } else {
        setAvgMedicarePayments((Double)value);
      }
      break;

    case NUM_DISCHARGES:
      if (value == null) {
        unsetNumDischarges();
      } else {
        setNumDischarges((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DRG_CODE:
      return getDrgCode();

    case DRG_NAME:
      return getDrgName();

    case PROVIDER_NAME:
      return getProviderName();

    case ZIP:
      return getZip();

    case STATE:
      return getState();

    case AVG_COVERED_CHARGES:
      return getAvgCoveredCharges();

    case AVG_TOTAL_PAYMENTS:
      return getAvgTotalPayments();

    case AVG_MEDICARE_PAYMENTS:
      return getAvgMedicarePayments();

    case NUM_DISCHARGES:
      return getNumDischarges();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DRG_CODE:
      return isSetDrgCode();
    case DRG_NAME:
      return isSetDrgName();
    case PROVIDER_NAME:
      return isSetProviderName();
    case ZIP:
      return isSetZip();
    case STATE:
      return isSetState();
    case AVG_COVERED_CHARGES:
      return isSetAvgCoveredCharges();
    case AVG_TOTAL_PAYMENTS:
      return isSetAvgTotalPayments();
    case AVG_MEDICARE_PAYMENTS:
      return isSetAvgMedicarePayments();
    case NUM_DISCHARGES:
      return isSetNumDischarges();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProcedureSummary)
      return this.equals((ProcedureSummary)that);
    return false;
  }

  public boolean equals(ProcedureSummary that) {
    if (that == null)
      return false;

    boolean this_present_drgCode = true && this.isSetDrgCode();
    boolean that_present_drgCode = true && that.isSetDrgCode();
    if (this_present_drgCode || that_present_drgCode) {
      if (!(this_present_drgCode && that_present_drgCode))
        return false;
      if (!this.drgCode.equals(that.drgCode))
        return false;
    }

    boolean this_present_drgName = true && this.isSetDrgName();
    boolean that_present_drgName = true && that.isSetDrgName();
    if (this_present_drgName || that_present_drgName) {
      if (!(this_present_drgName && that_present_drgName))
        return false;
      if (!this.drgName.equals(that.drgName))
        return false;
    }

    boolean this_present_providerName = true && this.isSetProviderName();
    boolean that_present_providerName = true && that.isSetProviderName();
    if (this_present_providerName || that_present_providerName) {
      if (!(this_present_providerName && that_present_providerName))
        return false;
      if (!this.providerName.equals(that.providerName))
        return false;
    }

    boolean this_present_zip = true && this.isSetZip();
    boolean that_present_zip = true && that.isSetZip();
    if (this_present_zip || that_present_zip) {
      if (!(this_present_zip && that_present_zip))
        return false;
      if (!this.zip.equals(that.zip))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_avgCoveredCharges = true;
    boolean that_present_avgCoveredCharges = true;
    if (this_present_avgCoveredCharges || that_present_avgCoveredCharges) {
      if (!(this_present_avgCoveredCharges && that_present_avgCoveredCharges))
        return false;
      if (this.avgCoveredCharges != that.avgCoveredCharges)
        return false;
    }

    boolean this_present_avgTotalPayments = true;
    boolean that_present_avgTotalPayments = true;
    if (this_present_avgTotalPayments || that_present_avgTotalPayments) {
      if (!(this_present_avgTotalPayments && that_present_avgTotalPayments))
        return false;
      if (this.avgTotalPayments != that.avgTotalPayments)
        return false;
    }

    boolean this_present_avgMedicarePayments = true;
    boolean that_present_avgMedicarePayments = true;
    if (this_present_avgMedicarePayments || that_present_avgMedicarePayments) {
      if (!(this_present_avgMedicarePayments && that_present_avgMedicarePayments))
        return false;
      if (this.avgMedicarePayments != that.avgMedicarePayments)
        return false;
    }

    boolean this_present_numDischarges = true;
    boolean that_present_numDischarges = true;
    if (this_present_numDischarges || that_present_numDischarges) {
      if (!(this_present_numDischarges && that_present_numDischarges))
        return false;
      if (this.numDischarges != that.numDischarges)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_drgCode = true && (isSetDrgCode());
    list.add(present_drgCode);
    if (present_drgCode)
      list.add(drgCode);

    boolean present_drgName = true && (isSetDrgName());
    list.add(present_drgName);
    if (present_drgName)
      list.add(drgName);

    boolean present_providerName = true && (isSetProviderName());
    list.add(present_providerName);
    if (present_providerName)
      list.add(providerName);

    boolean present_zip = true && (isSetZip());
    list.add(present_zip);
    if (present_zip)
      list.add(zip);

    boolean present_state = true && (isSetState());
    list.add(present_state);
    if (present_state)
      list.add(state);

    boolean present_avgCoveredCharges = true;
    list.add(present_avgCoveredCharges);
    if (present_avgCoveredCharges)
      list.add(avgCoveredCharges);

    boolean present_avgTotalPayments = true;
    list.add(present_avgTotalPayments);
    if (present_avgTotalPayments)
      list.add(avgTotalPayments);

    boolean present_avgMedicarePayments = true;
    list.add(present_avgMedicarePayments);
    if (present_avgMedicarePayments)
      list.add(avgMedicarePayments);

    boolean present_numDischarges = true;
    list.add(present_numDischarges);
    if (present_numDischarges)
      list.add(numDischarges);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProcedureSummary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDrgCode()).compareTo(other.isSetDrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drgCode, other.drgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrgName()).compareTo(other.isSetDrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drgName, other.drgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProviderName()).compareTo(other.isSetProviderName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProviderName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.providerName, other.providerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZip()).compareTo(other.isSetZip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zip, other.zip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvgCoveredCharges()).compareTo(other.isSetAvgCoveredCharges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvgCoveredCharges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avgCoveredCharges, other.avgCoveredCharges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvgTotalPayments()).compareTo(other.isSetAvgTotalPayments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvgTotalPayments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avgTotalPayments, other.avgTotalPayments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvgMedicarePayments()).compareTo(other.isSetAvgMedicarePayments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvgMedicarePayments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avgMedicarePayments, other.avgMedicarePayments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumDischarges()).compareTo(other.isSetNumDischarges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumDischarges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numDischarges, other.numDischarges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProcedureSummary(");
    boolean first = true;

    sb.append("drgCode:");
    if (this.drgCode == null) {
      sb.append("null");
    } else {
      sb.append(this.drgCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("drgName:");
    if (this.drgName == null) {
      sb.append("null");
    } else {
      sb.append(this.drgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("providerName:");
    if (this.providerName == null) {
      sb.append("null");
    } else {
      sb.append(this.providerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("zip:");
    if (this.zip == null) {
      sb.append("null");
    } else {
      sb.append(this.zip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("avgCoveredCharges:");
    sb.append(this.avgCoveredCharges);
    first = false;
    if (!first) sb.append(", ");
    sb.append("avgTotalPayments:");
    sb.append(this.avgTotalPayments);
    first = false;
    if (!first) sb.append(", ");
    sb.append("avgMedicarePayments:");
    sb.append(this.avgMedicarePayments);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numDischarges:");
    sb.append(this.numDischarges);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (drgCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'drgCode' was not present! Struct: " + toString());
    }
    if (drgName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'drgName' was not present! Struct: " + toString());
    }
    if (providerName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'providerName' was not present! Struct: " + toString());
    }
    if (zip == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'zip' was not present! Struct: " + toString());
    }
    if (state == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'state' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'avgCoveredCharges' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'avgTotalPayments' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'avgMedicarePayments' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'numDischarges' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProcedureSummaryStandardSchemeFactory implements SchemeFactory {
    public ProcedureSummaryStandardScheme getScheme() {
      return new ProcedureSummaryStandardScheme();
    }
  }

  private static class ProcedureSummaryStandardScheme extends StandardScheme<ProcedureSummary> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProcedureSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DRG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.drgCode = iprot.readString();
              struct.setDrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DRG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.drgName = iprot.readString();
              struct.setDrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROVIDER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.providerName = iprot.readString();
              struct.setProviderNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ZIP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zip = iprot.readString();
              struct.setZipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.state = iprot.readString();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AVG_COVERED_CHARGES
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.avgCoveredCharges = iprot.readDouble();
              struct.setAvgCoveredChargesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // AVG_TOTAL_PAYMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.avgTotalPayments = iprot.readDouble();
              struct.setAvgTotalPaymentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // AVG_MEDICARE_PAYMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.avgMedicarePayments = iprot.readDouble();
              struct.setAvgMedicarePaymentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NUM_DISCHARGES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numDischarges = iprot.readI32();
              struct.setNumDischargesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAvgCoveredCharges()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'avgCoveredCharges' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAvgTotalPayments()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'avgTotalPayments' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAvgMedicarePayments()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'avgMedicarePayments' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNumDischarges()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numDischarges' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProcedureSummary struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.drgCode != null) {
        oprot.writeFieldBegin(DRG_CODE_FIELD_DESC);
        oprot.writeString(struct.drgCode);
        oprot.writeFieldEnd();
      }
      if (struct.drgName != null) {
        oprot.writeFieldBegin(DRG_NAME_FIELD_DESC);
        oprot.writeString(struct.drgName);
        oprot.writeFieldEnd();
      }
      if (struct.providerName != null) {
        oprot.writeFieldBegin(PROVIDER_NAME_FIELD_DESC);
        oprot.writeString(struct.providerName);
        oprot.writeFieldEnd();
      }
      if (struct.zip != null) {
        oprot.writeFieldBegin(ZIP_FIELD_DESC);
        oprot.writeString(struct.zip);
        oprot.writeFieldEnd();
      }
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeString(struct.state);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AVG_COVERED_CHARGES_FIELD_DESC);
      oprot.writeDouble(struct.avgCoveredCharges);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVG_TOTAL_PAYMENTS_FIELD_DESC);
      oprot.writeDouble(struct.avgTotalPayments);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVG_MEDICARE_PAYMENTS_FIELD_DESC);
      oprot.writeDouble(struct.avgMedicarePayments);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_DISCHARGES_FIELD_DESC);
      oprot.writeI32(struct.numDischarges);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProcedureSummaryTupleSchemeFactory implements SchemeFactory {
    public ProcedureSummaryTupleScheme getScheme() {
      return new ProcedureSummaryTupleScheme();
    }
  }

  private static class ProcedureSummaryTupleScheme extends TupleScheme<ProcedureSummary> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProcedureSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.drgCode);
      oprot.writeString(struct.drgName);
      oprot.writeString(struct.providerName);
      oprot.writeString(struct.zip);
      oprot.writeString(struct.state);
      oprot.writeDouble(struct.avgCoveredCharges);
      oprot.writeDouble(struct.avgTotalPayments);
      oprot.writeDouble(struct.avgMedicarePayments);
      oprot.writeI32(struct.numDischarges);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProcedureSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.drgCode = iprot.readString();
      struct.setDrgCodeIsSet(true);
      struct.drgName = iprot.readString();
      struct.setDrgNameIsSet(true);
      struct.providerName = iprot.readString();
      struct.setProviderNameIsSet(true);
      struct.zip = iprot.readString();
      struct.setZipIsSet(true);
      struct.state = iprot.readString();
      struct.setStateIsSet(true);
      struct.avgCoveredCharges = iprot.readDouble();
      struct.setAvgCoveredChargesIsSet(true);
      struct.avgTotalPayments = iprot.readDouble();
      struct.setAvgTotalPaymentsIsSet(true);
      struct.avgMedicarePayments = iprot.readDouble();
      struct.setAvgMedicarePaymentsIsSet(true);
      struct.numDischarges = iprot.readI32();
      struct.setNumDischargesIsSet(true);
    }
  }

}

